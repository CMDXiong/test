<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference
  PUBLIC "-//Norman Walsh//DTD JRefEntry V1.0//EN" "http://nwalsh.com/docbook/jrefentry/1.0/jrefentry.dtd">
<reference>
<referenceinfo>
<releaseinfo role="meta">
$Id: param.xsl,v 1.7 2000/10/26 01:04:25 ndw Exp $
</releaseinfo>
<author><surname>Walsh</surname>
<firstname>Norman</firstname></author>
<copyright><year>1999</year><year>2000</year>
<holder>Norman Walsh</holder>
</copyright>
</referenceinfo>
<title>HTML Parameter Reference</title>

<partintro>
<section><title>Introduction</title>


<para>This is technical reference documentation for the DocBook XSL
Stylesheets; it documents (some of) the parameters, templates, and
other elements of the stylesheets.</para>



<para>This reference describes each of the HTML Stylesheet parameters.
These are the <quote>easily customizable</quote> parts of the stylesheet.
If you want to specify an alternate value for one or more of these
parameters, you can do so in a <quote>driver</quote> stylesheet.</para>



<para>For example, if you want to change the <literal>html.stylesheet</literal>
to <filename>reference.css</filename>, you might create a driver
stylesheet like this:</para>


<programlisting>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version='1.0'&gt;

  &lt;xsl:import href="/path/to/html/docbook.xsl"/&gt;

  &lt;xsl:param name="html.stylesheet"&gt;reference.css&lt;/xsl:param&gt;

&lt;/xsl:stylesheet&gt;</programlisting>


<para>Naturally, you have to change the
<sgmltag class="attribute">href</sgmltag> attribute on
<literal>&lt;xsl:import&gt;</literal>
to point to <filename>docbook.xsl</filename>
on your system. (Or <filename>chunk.xsl</filename>, if you're using
chunking.)</para>



<para>This is not intended to be <quote>user</quote> documentation.
It is provided for developers writing customization layers for the
stylesheets, and for anyone who's interested in <quote>how it
works</quote>.</para>



<para>Although I am trying to be thorough, this documentation is known
to be incomplete. Don't forget to read the source, too :-)</para>

</section>
</partintro>

<refentry id="param.author.othername.in.middle">
<refnamediv>
<refname>author.othername.in.middle</refname>
<refpurpose>Is <sgmltag>othername</sgmltag> in <sgmltag>author</sgmltag> a
middle name?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="author.othername.in.middle" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), the <sgmltag>othername</sgmltag> of an <sgmltag>author</sgmltag>
appears between the <sgmltag>firstname</sgmltag> and
<sgmltag>surname</sgmltag>.  Otherwise, <sgmltag>othername</sgmltag>
is suppressed.
</para>

</refdescription></refentry>

<refentry id="param.html.stylesheet">
<refnamediv>
<refname>html.stylesheet</refname>
<refpurpose>Name of the stylesheet to use in the generated HTML</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.stylesheet" select="''"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The name of the stylesheet to place in the HTML <sgmltag>LINK</sgmltag>
tag, or the empty string to suppress the stylesheet <sgmltag>LINK</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.html.stylesheet.type">
<refnamediv>
<refname>html.stylesheet.type</refname>
<refpurpose>The type of the stylesheet used in the generated HTML</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.stylesheet.type"&gt;text/css&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>The type of the stylesheet to place in the HTML <sgmltag>link</sgmltag> tag.
</para>

</refdescription></refentry>

<refentry id="param.html.base">
<refnamediv>
<refname>html.base</refname>
<refpurpose>An HTML base URI</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="html.base"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If html.base is set, it is used for the <sgmltag>BASE</sgmltag>
element in the <sgmltag>HEAD</sgmltag> of the HTML documents.
This is useful for dynamically served HTML where the base URI needs
to be shifted.</para>

</refdescription></refentry>

<refentry id="param.refentry.xref.manvolnum">
<refnamediv>
<refname>refentry.xref.manvolnum</refname>
<refpurpose>Output <sgmltag>manvolnum</sgmltag> as part of 
<sgmltag>refentry</sgmltag> cross-reference?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="refentry.xref.manvolnum" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>if true (non-zero), the <sgmltag>manvolnum</sgmltag> is used when cross-referencing
<sgmltag>refentry</sgmltag>s, either with <sgmltag>xref</sgmltag>
or <sgmltag>citerefentry</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.show.comments">
<refnamediv>
<refname>show.comments</refname>
<refpurpose>Display <sgmltag>comment</sgmltag> elements?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="show.comments"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), comments will be displayed, otherwise they are suppressed.
Comments here refers to the <sgmltag>comment</sgmltag> element,
which will be renamed <sgmltag>remark</sgmltag> in DocBook V4.0,
not XML comments (&lt;-- like this --&gt;) which are unavailable.
</para>

</refdescription></refentry>

<refentry id="param.funcsynopsis.style">
<refnamediv>
<refname>funcsynopsis.style</refname>
<refpurpose>What style of 'FuncSynopsis' should be generated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="funcsynopsis.style"&gt;kr&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If <varname>funcsynopsis.style</varname> is <literal>ansi</literal>,
ANSI-style function synopses are generated for a
<sgmltag>funcsynopsis</sgmltag>, otherwise K&amp;R-style
function synopses are generated.
</para>

</refdescription></refentry>

<refentry id="param.funcsynopsis.decoration">
<refnamediv>
<refname>funcsynopsis.decoration</refname>
<refpurpose>Decorate elements of a FuncSynopsis?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="funcsynopsis.decoration" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), elements of the FuncSynopsis will be decorated (e.g. bold or
italic).  The decoration is controlled by functions that can be redefined
in a customization layer.
</para>

</refdescription></refentry>

<refentry id="param.function.parens">
<refnamediv>
<refname>function.parens</refname>
<refpurpose>Generate parens after a function?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="function.parens"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If not 0, the formatting of
a <sgmltag class="starttag">function</sgmltag> element will include
generated parenthesis.
</para>

</refdescription></refentry>

<refentry id="param.refentry.generate.name">
<refnamediv>
<refname>refentry.generate.name</refname>
<refpurpose>Output NAME header before 'RefName'(s)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="refentry.generate.name" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a "NAME" section title is output before the list
of 'RefName's.
</para>

</refdescription></refentry>

<refentry id="param.admon.graphics">
<refnamediv>
<refname>admon.graphics</refname>
<refpurpose>Use graphics in admonitions?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.graphics" select="0"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.
</para>

</refdescription></refentry>

<refentry id="param.admon.graphics.path">
<refnamediv>
<refname>admon.graphics.path</refname>
<refpurpose>Path to admonition graphics</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.graphics.path"&gt;../images/&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the admonition graphics.
</para>

</refdescription></refentry>

<refentry id="param.admon.style">
<refnamediv>
<refname>admon.style</refname>
<refpurpose>CSS style attributes for admonitions</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="admon.style"&gt;
  &lt;xsl:text&gt;margin-left: 0.5in; margin-right: 0.5in;&lt;/xsl:text&gt;
&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Specifies the value of the <sgmltag class="attribute">STYLE</sgmltag>
attribute that should be added to admonitions.
</para>

</refdescription></refentry>

<refentry id="param.section.autolabel">
<refnamediv>
<refname>section.autolabel</refname>
<refpurpose>Are sections enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="section.autolabel" select="0"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled sections will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.section.label.includes.component.label">
<refnamediv>
<refname>section.label.includes.component.label</refname>
<refpurpose>Do section labels include the component label?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="section.label.includes.component.label" select="0"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), section labels are prefixed with the label of the
component that contains them.
</para>

</refdescription></refentry>

<refentry id="param.chapter.autolabel">
<refnamediv>
<refname>chapter.autolabel</refname>
<refpurpose>Are chapters and appendixes enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="chapter.autolabel" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled chapters and appendixes will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.preface.autolabel">
<refnamediv>
<refname>preface.autolabel</refname>
<refpurpose>Are prefaces enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="preface.autolabel" select="0"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled prefaces will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.part.autolabel">
<refnamediv>
<refname>part.autolabel</refname>
<refpurpose>Are parts and references enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="part.autolabel" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled parts and references will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.qandadiv.autolabel">
<refnamediv>
<refname>qandadiv.autolabel</refname>
<refpurpose>Are divisions in QAndASets enumerated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qandadiv.autolabel" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), unlabeled qandadivs will be enumerated.
</para>

</refdescription></refentry>

<refentry id="param.qanda.inherit.numeration">
<refnamediv>
<refname>qanda.inherit.numeration</refname>
<refpurpose>Does enumeration of QandASet components inherit the numeration of parent elements?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qanda.inherit.numeration" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), numbered QandADiv elements and Questions and Answers inherit
the numeration of the ancestors of the QandASet.
</para>

</refdescription></refentry>

<refentry id="param.qanda.defaultlabel">
<refnamediv>
<refname>qanda.defaultlabel</refname>
<refpurpose>Sets the default for defaultlabel on QandASet.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="qanda.defaultlabel"&gt;number&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If no defaultlabel attribute is specified on a QandASet, this
value is used. It must be one of the legal values for the defaultlabel
attribute.
</para>

</refdescription></refentry>

<refentry id="param.generate.qandaset.toc">
<refnamediv>
<refname>generate.qandaset.toc</refname>
<refpurpose>Is a Table of Contents created for QandASets?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.qandaset.toc"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a ToC is constructed for QandASets.
</para>

</refdescription></refentry>

<refentry id="param.generate.qandadiv.toc">
<refnamediv>
<refname>generate.qandadiv.toc</refname>
<refpurpose>Is a Table of Contents created for QandADivs?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.qandadiv.toc"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), a ToC is constructed for QandADivs.
</para>

</refdescription></refentry>

<refentry id="param.biblioentry.item.separator">
<refnamediv>
<refname>biblioentry.item.separator</refname>
<refpurpose>Text to separate bibliography entries</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="biblioentry.item.separator"&gt;. &lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Text to separate bibliography entries
</para>

</refdescription></refentry>

<refentry id="param.toc.section.depth">
<refnamediv>
<refname>toc.section.depth</refname>
<refpurpose>How deep should recursive <sgmltag>section</sgmltag>s appear
in the TOC?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="toc.section.depth"&gt;2&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>Specifies the depth to which recursive sections should appear in the
TOC.
</para>

</refdescription></refentry>

<refentry id="param.using.chunker">
<refnamediv>
<refname>using.chunker</refname>
<refpurpose>Will the output be chunked?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="using.chunker" select="0"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>In addition to providing chunking, the chunker can cleanup a
number of XML to HTML issues. If the chunker is not being used, the
stylesheets try to avoid producing results that will not appear properly
in browsers.
</para>

</refdescription></refentry>

<refentry id="param.generate.component.toc">
<refnamediv>
<refname>generate.component.toc</refname>
<refpurpose>Should TOCs be genereated in components (Chapters, Appendixes, etc.)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.component.toc" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), they are.
</para>

</refdescription></refentry>

<refentry id="param.generate.division.toc">
<refnamediv>
<refname>generate.division.toc</refname>
<refpurpose>Should TOCs be genereated in divisions (Books, Parts, etc.)?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="generate.division.toc" select="1"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If true (non-zero), they are.
</para>

</refdescription></refentry>

<refentry id="param.link.mailto.url">
<refnamediv>
<refname>link.mailto.url</refname>
<refpurpose>Mailto URL for the LINK REL=made HTML HEAD element</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="link.mailto.url"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If not the empty string, this address will be used for the
REL=made <sgmltag>LINK</sgmltag> element in the HTML <sgmltag>HEAD</sgmltag>.
</para>

</refdescription></refentry>

<refentry id="param.graphic.default.extension">
<refnamediv>
<refname>graphic.default.extension</refname>
<refpurpose>Default extension for graphic filenames</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="graphic.default.extension"/&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If a <sgmltag>graphic</sgmltag> or <sgmltag>mediaobject</sgmltag>
includes a reference to a filename that does not include an extension,
and the <sgmltag class="attribute">format</sgmltag> attribute is
<emphasis>unspecified</emphasis>, the default extension will be used.
</para>

</refdescription></refentry>

<refentry id="param.toc.list.type">
<refnamediv>
<refname>toc.list.type</refname>
<refpurpose>Type of HTML list element to use for Tables of Contents</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="toc.list.type"&gt;dl&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>When an automatically generated Table of Contents (or List of Titles)
is produced, this HTML element will be used to make the list.
</para>

</refdescription></refentry>

<refentry id="param.check.idref">
<refnamediv>
<refname>check.idref</refname>
<refpurpose>Test the target of IDREF attributes?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="check.idref"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If 1, the target of IDREF attributes are tested for presence
(and uniqueness). This can be very expensive in large documents.
</para>

</refdescription></refentry>

<refentry id="param.use.id.function">
<refnamediv>
<refname>use.id.function</refname>
<refpurpose>Use the XPath id() function to find link targets?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="use.id.function"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>If 1, the stylesheets use the <function>id()</function> function
to find the targets of cross reference elements. This is more
efficient, but only works if your XSLT processor implements the
<function>id()</function> function, naturally.</para>


<para>THIS PARAMETER IS NOT SUPPORTED. IT IS ALWAYS ASSUMED TO BE 1.
SEE xref.xsl IF YOU NEED TO TURN IT OFF.</para>

</refdescription></refentry>

<refentry id="param.spacing.paras">
<refnamediv>
<refname>spacing.paras</refname>
<refpurpose>Insert additional &lt;p&gt; elements for spacing?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="spacing.paras"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>When non-zero, additional, empty paragraphs are inserted in
several contexts (for example, around informal figures), to create a
more pleasing visual appearance in many browsers.
</para>

</refdescription></refentry>
<refentry id="attrset."><refnamediv><refname> mode</refname><refpurpose>Additional attributes for the HTML body tag</refpurpose></refnamediv><refdescription>

<para>The attributes defined by this attribute set are added to the
HTML &lt;body&gt; tag.
</para>

</refdescription></refentry>
<refentry id="param.css.decoration">
<refnamediv>
<refname>css.decoration</refname>
<refpurpose>Enable CSS decoration of elements</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="css.decoration"&gt;1&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>css.decoration</literal> is turned on, then HTML elements
produced by the
stylesheet may be decorated with STYLE attributes.  For example, the
LI tags produced for list items may include a fragment of CSS in the
STYLE attribute which sets the CSS property "list-style-type".
</para>

</refdescription></refentry>

<refentry id="param.show.revisionflag">
<refnamediv>
<refname>show.revisionflag</refname>
<refpurpose>Enable decoration of elements that have a revisionflag</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="show.revisionflag"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>show.revisionflag</literal> is turned on, then the stylesheets
may produce additional markup designed to allow a CSS stylesheet to
highlight elements that have specific revisionflag settings.</para>



<para>The markup inserted will be usually be either a &lt;span&gt; or &lt;div&gt;
with an appropriate <literal>class</literal> attribute. (The value of
the class attribute will be the same as the value of the revisionflag
attribute). In some contexts, for example tables, where extra markup
would be structurally illegal, the class attribute will be added to the
appropriate container element.</para>



<para>In general, the stylesheets only test for revisionflag in contexts
where an importing stylesheet would have to redefine whole templates.
Most of the revisionflag processing is expected to be done by another
stylesheet, for example <filename>changebars.xsl</filename>.</para>

</refdescription></refentry>

<refentry id="param.suppress.navigation">
<refnamediv>
<refname>suppress.navigation</refname>
<refpurpose>Disable header and footer navigation</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>
&lt;xsl:param name="suppress.navigation"&gt;0&lt;/xsl:param&gt;</synopsis>
</refsynopsisdiv>
<refdescription>

<para>
If <literal>suppress.navigation</literal> is turned on, header and
footer navigation will be suppressed.</para>

</refdescription></refentry>
</reference>
