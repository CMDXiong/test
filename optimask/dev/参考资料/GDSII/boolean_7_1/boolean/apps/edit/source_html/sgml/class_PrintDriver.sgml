<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class PrintDriver"
>

<META-DATA>
	<NAME>PrintDriver</NAME>
	<AUTHOR>klaas holwerda</AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Thu Oct 14 13:41:36 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>scrndrv.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>lsetup.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdsii.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>mainwin.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>


<CODE-FILES>
	<CODE-FILE>
		<NAME>printer.cpp</NAME>
	</CODE-FILE>
</CODE-FILES>


<DESCRIPTION>
	<PARA> low level drawing function for primitives to draw to the printer it is derived from wxPrintout as well as the drawdriver. And therefore the mediator between the internal database and the printer device see for more info related types.</PARA>
</DESCRIPTION>

<INHERITANCE>
	<PARENT-CLASS
		SCOPE="public"
		VIRTUAL="STANDARD"
	>
		<NAME>wxPrintout</NAME>
	</PARENT-CLASS>
	<PARENT-CLASS
		SCOPE="public"
		VIRTUAL="STANDARD"
	>
		<NAME>DrawDriver</NAME>
	</PARENT-CLASS>
</INHERITANCE>





<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="PrintDriver(GDSMainWindow*,char *)"
		INLINE="NO"
	>
		<NAME>PrintDriver</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="~PrintDriver(void)"
		INLINE="NO"
	>
		<NAME>~PrintDriver</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="bool "
		DECLARATION="bool OnPrintPage(int)"
		INLINE="NO"
	>
		<NAME>OnPrintPage</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="bool "
		DECLARATION="bool OnBeginDocument(int startPage, int endPage)"
		INLINE="NO"
	>
		<NAME>OnBeginDocument</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="bool "
		DECLARATION="bool HasPage(int page)"
		INLINE="NO"
	>
		<NAME>HasPage</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo)"
		INLINE="NO"
	>
		<NAME>GetPageInfo</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void GetClientWindowSize(int* dx, int* dy)"
		INLINE="NO"
	>
		<NAME>GetClientWindowSize</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL Pending()"
		INLINE="NO"
	>
		<NAME>Pending</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Init(Setup* setup)"
		INLINE="NO"
	>
		<NAME>Init</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawGrid(EIGHT_G_BYTE_REAL,long,int)"
		INLINE="NO"
	>
		<NAME>DrawGrid</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void DrawCrossHair(double,double)"
		INLINE="NO"
	>
		<NAME>DrawCrossHair</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="EIGHT_G_BYTE_REAL "
		DECLARATION="EIGHT_G_BYTE_REAL Check_int(EIGHT_G_BYTE_REAL getal)"
		INLINE="NO"
	>
		<NAME>Check_int</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>


	<MEMBER-FUNCTION
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	ClearScreen()"
		INLINE="NO"
	>
		<NAME>ClearScreen</NAME>
		
		
		<DESCRIPTION>
			<PARA> XPoint* todraw;	POINT * todraw;</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>


	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME=" void	"
		DECLARATION=" void	SetLayer(int layer)"
		INLINE="YES"
	>
		<NAME>SetLayer</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	UnSetLayer(int layer)"
		INLINE="NO"
	>
		<NAME>UnSetLayer</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	GDSDrawText(char* text, double x, double y, double x2, double y2, Presentation*, Matrix&lt;double&gt;*)"
		INLINE="NO"
	>
		<NAME>GDSDrawText</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	GDSDrawLine(double x1, double y1, double x2, double y2)"
		INLINE="NO"
	>
		<NAME>GDSDrawLine</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawLineSelected(double x1, double y1, double x2, double y2)"
		INLINE="NO"
	>
		<NAME>DrawLineSelected</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME=" void	"
		DECLARATION=" void	GDSDrawPoint(double x, double y)"
		INLINE="YES"
	>
		<NAME>GDSDrawPoint</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WindowsPolygon(void)"
		INLINE="NO"
	>
		<NAME>WindowsPolygon</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WindowsPolyline(void)"
		INLINE="NO"
	>
		<NAME>WindowsPolyline</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawFillLine(double x1, double y1, double x2, double y2)"
		INLINE="NO"
	>
		<NAME>DrawFillLine</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void ltowxc(long l,wxColour&amp; color)"
		INLINE="NO"
	>
		<NAME>ltowxc</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawRect(int x1, int y1, int x2, int y2)"
		INLINE="NO"
	>
		<NAME>DrawRect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawOriginLine(double x1, double y1, double x2, double y2)"
		INLINE="NO"
	>
		<NAME>DrawOriginLine</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>


	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxDC*	"
		DECLARATION="wxDC*	_dc"
	>
		<NAME>_dc</NAME>
		<DESCRIPTION>
			<PARA> the device context for drawing</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="int	"
		DECLARATION="int	_w, _h"
	>
		<NAME>_w, _h</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL _crosshair"
	>
		<NAME>_crosshair</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="GDSMainWindow*	"
		DECLARATION="GDSMainWindow*	_parent"
	>
		<NAME>_parent</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>


	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="int	"
		DECLARATION="int	_visible"
	>
		<NAME>_visible</NAME>
		<DESCRIPTION>
			<PARA> if true then draw only</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxColour*	"
		DECLARATION="wxColour*	_textColor"
	>
		<NAME>_textColor</NAME>
		<DESCRIPTION>
			<PARA> holds the drawing color</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxColour*	"
		DECLARATION="wxColour*	_fillcolor"
	>
		<NAME>_fillcolor</NAME>
		<DESCRIPTION>
			<PARA> holds the fill color</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPen*	"
		DECLARATION="wxPen*	_penSelected"
	>
		<NAME>_penSelected</NAME>
		<DESCRIPTION>
			<PARA> the pen used for drawing a border around selected elements</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPen*	"
		DECLARATION="wxPen*	_pen"
	>
		<NAME>_pen</NAME>
		<DESCRIPTION>
			<PARA> the pen used for drawing</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPen*	"
		DECLARATION="wxPen*	_pengrid"
	>
		<NAME>_pengrid</NAME>
		<DESCRIPTION>
			<PARA> the pen used for grid drawing</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPen*	"
		DECLARATION="wxPen*	_penorigin"
	>
		<NAME>_penorigin</NAME>
		<DESCRIPTION>
			<PARA> the pen used for origin drawing</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPen*	"
		DECLARATION="wxPen*	_fillpen"
	>
		<NAME>_fillpen</NAME>
		<DESCRIPTION>
			<PARA> the pen used for filling</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxBrush*	"
		DECLARATION="wxBrush*	_brush"
	>
		<NAME>_brush</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxFont*	"
		DECLARATION="wxFont*	_font"
	>
		<NAME>_font</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
</MEMBERS>


</CLASS>
</CXXDOC>

