<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class DrawDriver__2"
>

<META-DATA>
	<NAME>DrawDriver__2</NAME>
	<AUTHOR>klaasje</AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Thu Oct 14 16:53:43 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>_lnk_itr.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>drivout.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>lsetup.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>matrix.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>bbox.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>shape.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>polyline.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>



<CODE-FILES>
	<CODE-FILE>
		<NAME></NAME>
	</CODE-FILE>
</CODE-FILES>

<DESCRIPTION>
	<PARA></PARA>
</DESCRIPTION>

<INHERITANCE>
	<PARENT-CLASS
		SCOPE="public"
		VIRTUAL="STANDARD"
	>
		<NAME>Driver_out</NAME>
	</PARENT-CLASS>
</INHERITANCE>





<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="DrawDriver()"
		INLINE="NO"
	>
		<NAME>DrawDriver</NAME>
		
		
		<DESCRIPTION>
			<PARA> constructors and destructor</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="~DrawDriver()"
		INLINE="NO"
	>
		<NAME>~DrawDriver</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawOrigin()"
		INLINE="NO"
	>
		<NAME>DrawOrigin</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	DrawGrid(double,long,int)"
		INLINE="NO"
	>
		<NAME>DrawGrid</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	MakeWindowCoordinates(double&amp;, double&amp;, double&amp;, double&amp;)"
		INLINE="NO"
	>
		<NAME>MakeWindowCoordinates</NAME>
		
		
		<DESCRIPTION>
			<PARA> init must be declared in a derived class! see the CPP file for details about the functions No more comment here</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	MakeWindowCoordinates(double&amp;, double&amp;, double&amp;, double&amp;)"
		INLINE="NO"
	>
		<NAME>MakeWindowCoordinates</NAME>
		
		
		<DESCRIPTION>
			<PARA> init must be declared in a derived class! see the CPP file for details about the functions No more comment here</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Init(Setup*)"
		INLINE="NO"
	>
		<NAME>Init</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="Matrix<double>*	"
		DECLARATION="Matrix&lt;double&gt;*	GetInverseMappingMatrix()"
		INLINE="NO"
	>
		<NAME>GetInverseMappingMatrix</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="Matrix<double>*	"
		DECLARATION="Matrix&lt;double&gt;*	GetMappingMatrix()"
		INLINE="NO"
	>
		<NAME>GetMappingMatrix</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="BoundingBox*	"
		DECLARATION="BoundingBox*	GetVirtualSizeScreen()"
		INLINE="NO"
	>
		<NAME>GetVirtualSizeScreen</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void GetClientWindowSize(int* dx, int* dy)"
		INLINE="NO"
	>
		<NAME>GetClientWindowSize</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	SetMapping(double vx1, double vy1, double vx2, double vy2, int border)"
		INLINE="NO"
	>
		<NAME>SetMapping</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	ClearScreen()"
		INLINE="NO"
	>
		<NAME>ClearScreen</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	OnPaint()"
		INLINE="NO"
	>
		<NAME>OnPaint</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	UpdateSize()"
		INLINE="NO"
	>
		<NAME>UpdateSize</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	SetDrawStyle(DrawStyle)"
		INLINE="NO"
	>
		<NAME>SetDrawStyle</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="DrawStyle	"
		DECLARATION="DrawStyle	GetDrawStyle()"
		INLINE="NO"
	>
		<NAME>GetDrawStyle</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	IsDrawStyle(DrawStyle)"
		INLINE="NO"
	>
		<NAME>IsDrawStyle</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void SetUnits(Units* units)"
		INLINE="NO"
	>
		<NAME>SetUnits</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="double	"
		DECLARATION="double	GetScaleFactor()"
		INLINE="NO"
	>
		<NAME>GetScaleFactor</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	WriteDirect(ElementList*)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WriteDirect(Path* _Path)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WriteDirect(Boundary* _Boundary)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WriteDirect(Box* _Box)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void WriteDirect(Circle* _Circle)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	WriteDirect(Text*)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	WriteDirect(Arcseg*)"
		INLINE="NO"
	>
		<NAME>WriteDirect</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>




	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Box* _Box)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Circle* _Circle)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(ArrayReference*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Bgnlib*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Bgnstr*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Element*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Boundary*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(ElementList*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(ColumnsRows*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Elflags*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(GdsII*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Header*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Library*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Path*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Arcseg*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Point*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Segment*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(G_Polygon*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(G_Polyline*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Presentation*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Strans*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(StructureList*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(StructureReference*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Structure*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	Write(Text*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Units*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>




	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="BoundingBox*	"
		DECLARATION="BoundingBox*	_virtualsize"
	>
		<NAME>_virtualsize</NAME>
		<DESCRIPTION>
			<PARA> holds the size of the virtual window</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="BoundingBox*	"
		DECLARATION="BoundingBox*	_absbox"
	>
		<NAME>_absbox</NAME>
		<DESCRIPTION>
			<PARA> used for calculating absolute boundingboxes</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Matrix<double>*	"
		DECLARATION="Matrix&lt;double&gt;*	_matrix"
	>
		<NAME>_matrix</NAME>
		<DESCRIPTION>
			<PARA> holds the matrix from structure reference</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Matrix<double>*	"
		DECLARATION="Matrix&lt;double&gt;*	_mapping_matrix"
	>
		<NAME>_mapping_matrix</NAME>
		<DESCRIPTION>
			<PARA> holds the matrix for mapping from virtual to real;</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Matrix<double>*	"
		DECLARATION="Matrix&lt;double&gt;*	_inverse_mapping"
	>
		<NAME>_inverse_mapping</NAME>
		<DESCRIPTION>
			<PARA> holds the inverse of the mapping matrix</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="double	"
		DECLARATION="double	_scalefactor"
	>
		<NAME>_scalefactor</NAME>
		<DESCRIPTION>
			<PARA> holds the scalefactor for the window</PARA>
		</DESCRIPTION>
	</MEMBER>
</MEMBERS>


</CLASS>
</CXXDOC>

