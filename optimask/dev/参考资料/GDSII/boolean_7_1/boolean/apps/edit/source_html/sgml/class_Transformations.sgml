<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class Transformations"
>

<META-DATA>
	<NAME>Transformations</NAME>
	<AUTHOR></AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Wed Oct 20  9:19:05 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>chandbas.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>mainwin.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>string.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdsapp.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>


<CODE-FILES>
	<CODE-FILE>
		<NAME>transdlg.cpp</NAME>
	</CODE-FILE>
</CODE-FILES>


<DESCRIPTION>
	<PARA> Class Transformations. This class is used to show a transformations dialog, in which can be mirrored and moved horizontally and vertically, scaled(factor), rotated(degrees) and the direction can be given (clockwise or counter clockwise).</PARA>
</DESCRIPTION>

<INHERITANCE>
	<PARENT-CLASS
		SCOPE="public"
		VIRTUAL="STANDARD"
	>
		<NAME>wxDialog</NAME>
	</PARENT-CLASS>
</INHERITANCE>





<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="Transformations(GDSMainWindow* parent,long style = &amp;&amp;BRAKOwxTHICK_FRAME | wxCAPTION&amp;&amp;BRAKC)"
		INLINE="NO"
	>
		<NAME>Transformations</NAME>
		
		
		<DESCRIPTION>
			<PARA> Constructor.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="~Transformations()"
		INLINE="NO"
	>
		<NAME>~Transformations</NAME>
		
		
		<DESCRIPTION>
			<PARA> Destructor.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	SetupWindow(G_BOOL)"
		INLINE="NO"
	>
		<NAME>SetupWindow</NAME>
		
		
		<DESCRIPTION>
			<PARA> Windows initialization.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	CmOk()"
		INLINE="NO"
	>
		<NAME>CmOk</NAME>
		
		
		<DESCRIPTION>
			<PARA> Close window if OK-button is pressed.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	CmReset()"
		INLINE="NO"
	>
		<NAME>CmReset</NAME>
		
		
		<DESCRIPTION>
			<PARA> Set default values if RESET-button is pressed.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void CmApply()"
		INLINE="NO"
	>
		<NAME>CmApply</NAME>
		
		
		<DESCRIPTION>
			<PARA> Use new settings without closing the window.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void CmUndo()"
		INLINE="NO"
	>
		<NAME>CmUndo</NAME>
		
		
		<DESCRIPTION>
			<PARA> Restore last settings without closing the window.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	EnableItem(char*, G_BOOL)"
		INLINE="NO"
	>
		<NAME>EnableItem</NAME>
		
		
		<DESCRIPTION>
			<PARA> Called when checkbox "_item" was clicked.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void OnCloseWindow(wxCloseEvent&amp; event)"
		INLINE="NO"
	>
		<NAME>OnCloseWindow</NAME>
		
		
		<DESCRIPTION>
			<PARA> Close window if EXIT-button is pressed.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>




	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="DECLARE_EVENT_TABLE()"
		INLINE="NO"
	>
		<NAME>DECLARE_EVENT_TABLE</NAME>
		
		
		<DESCRIPTION>
			<PARA> Declare used events.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>




	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	_all_layers"
	>
		<NAME>_all_layers</NAME>
		<DESCRIPTION>
			<PARA> Should the action be peformed on Group A (False) or the all layers structures (True)</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="GDSMainWindow*	"
		DECLARATION="GDSMainWindow*	_parent"
	>
		<NAME>_parent</NAME>
		<DESCRIPTION>
			<PARA> Pointer to mainwindow.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxPanel*	"
		DECLARATION="wxPanel*	_panel"
	>
		<NAME>_panel</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxButton*	"
		DECLARATION="wxButton*	_ok"
	>
		<NAME>_ok</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxButton*	"
		DECLARATION="wxButton*	_reset"
	>
		<NAME>_reset</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxButton*	"
		DECLARATION="wxButton*	_apply"
	>
		<NAME>_apply</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxButton* "
		DECLARATION="wxButton* _undo"
	>
		<NAME>_undo</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxStaticBox*	"
		DECLARATION="wxStaticBox*	_movebox"
	>
		<NAME>_movebox</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxStaticBox*	"
		DECLARATION="wxStaticBox*	_mirrorbox"
	>
		<NAME>_mirrorbox</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxStaticBox*	"
		DECLARATION="wxStaticBox*	_scalebox"
	>
		<NAME>_scalebox</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxStaticBox*	"
		DECLARATION="wxStaticBox*	_rotatebox"
	>
		<NAME>_rotatebox</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxStaticBox*	"
		DECLARATION="wxStaticBox*	_selectbox"
	>
		<NAME>_selectbox</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxRadioBox*	"
		DECLARATION="wxRadioBox*	_ed_cwORccw"
	>
		<NAME>_ed_cwORccw</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxTextCtrl*	"
		DECLARATION="wxTextCtrl*	_ed_scale_h"
	>
		<NAME>_ed_scale_h</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxTextCtrl*	"
		DECLARATION="wxTextCtrl*	_ed_degrees"
	>
		<NAME>_ed_degrees</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxTextCtrl*	"
		DECLARATION="wxTextCtrl*	_ed_move_h"
	>
		<NAME>_ed_move_h</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxTextCtrl*	"
		DECLARATION="wxTextCtrl*	_ed_move_v"
	>
		<NAME>_ed_move_v</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_move"
	>
		<NAME>_check_move</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_mirror_h"
	>
		<NAME>_check_mirror_h</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_mirror_v"
	>
		<NAME>_check_mirror_v</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_scale_h"
	>
		<NAME>_check_scale_h</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_ratio"
	>
		<NAME>_check_ratio</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_rotate"
	>
		<NAME>_check_rotate</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="wxCheckBox*	"
		DECLARATION="wxCheckBox*	_check_select"
	>
		<NAME>_check_select</NAME>
		<DESCRIPTION>
			<PARA> wxWindows class.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	_scale_h_ratio[10]"
	>
		<NAME>_scale_h_ratio[10]</NAME>
		<DESCRIPTION>
			<PARA> String which contains scale value.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	_degr[10]"
	>
		<NAME>_degr[10]</NAME>
		<DESCRIPTION>
			<PARA> String which contains degree value.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	_move_h[10]"
	>
		<NAME>_move_h[10]</NAME>
		<DESCRIPTION>
			<PARA> String which contains horizontal move value.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	_move_v[10]"
	>
		<NAME>_move_v[10]</NAME>
		<DESCRIPTION>
			<PARA> String which contains vertical move value.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	_mirror_x"
	>
		<NAME>_mirror_x</NAME>
		<DESCRIPTION>
			<PARA> Horizontal mirror value.</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	_mirror_y"
	>
		<NAME>_mirror_y</NAME>
		<DESCRIPTION>
			<PARA> Vertical mirror value.</PARA>
		</DESCRIPTION>
	</MEMBER>
</MEMBERS>


</CLASS>
</CXXDOC>

