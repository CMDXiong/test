<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class FLASH_driver_in"
>

<META-DATA>
	<NAME>FLASH_driver_in</NAME>
	<AUTHOR>klaas</AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Thu Oct 14 16:53:42 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>misc.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdsdef.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdserr.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>lsetup.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>


<CODE-FILES>
	<CODE-FILE>
		<NAME>flashin.cpp</NAME>
	</CODE-FILE>
</CODE-FILES>


<DESCRIPTION>
	<PARA> Input driver for DAVID Mann files. DAVID mann contains rectanguler DATA called flashes Flash data is read/mapped into the right internal structure (Box element) The DAVID Mann file is parsed according to the BNF given here.</PARA>
</DESCRIPTION>







<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="FLASH_driver_in(Setup* setup,char* filename, G_BOOL add, int layernr = 0)"
		INLINE="NO"
	>
		<NAME>FLASH_driver_in</NAME>
		<PARAMETERS>
			<PARAMETER>
				<NAME>setup</NAME>
				<DESCRIPTION><PARA>layer properties</PARA></DESCRIPTION>
			</PARAMETER>
			<PARAMETER>
				<NAME>filename</NAME>
				<DESCRIPTION><PARA>name of GDSII input file</PARA></DESCRIPTION>
			</PARAMETER>
			<PARAMETER>
				<NAME>add</NAME>
				<DESCRIPTION><PARA>add data to existing drawing</PARA></DESCRIPTION>
			</PARAMETER>
			<PARAMETER>
				<NAME>add</NAME>
				<DESCRIPTION><PARA>add data on this layernr</PARA></DESCRIPTION>
			</PARAMETER>
		</PARAMETERS>
		
		<DESCRIPTION>
			<PARA> constructor</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="~FLASH_driver_in()"
		INLINE="NO"
	>
		<NAME>~FLASH_driver_in</NAME>
		
		
		<DESCRIPTION>
			<PARA>destructor</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read(GdsII*)"
		INLINE="NO"
	>
		<NAME>Read</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void SetDavidMannAdd(G_BOOL)"
		INLINE="NO"
	>
		<NAME>SetDavidMannAdd</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>




	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL Read_Command_From_FLASH_File()"
		INLINE="NO"
	>
		<NAME>Read_Command_From_FLASH_File</NAME>
		
		
		<DESCRIPTION>
			<PARA>read one command from flash file</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Strip_Nonsense()"
		INLINE="NO"
	>
		<NAME>Strip_Nonsense</NAME>
		
		
		<DESCRIPTION>
			<PARA>filter comment and spaces from input</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Strip_Blanks()"
		INLINE="NO"
	>
		<NAME>Strip_Blanks</NAME>
		
		
		<DESCRIPTION>
			<PARA> remove blanks</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Strip_BOF()"
		INLINE="NO"
	>
		<NAME>Strip_BOF</NAME>
		
		
		<DESCRIPTION>
			<PARA> remove start of FLASH file symbol (='#')</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Strip_Comment()"
		INLINE="NO"
	>
		<NAME>Strip_Comment</NAME>
		
		
		<DESCRIPTION>
			<PARA> remove comment.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Strip_Item(int)"
		INLINE="NO"
	>
		<NAME>Strip_Item</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Items(int &amp;teller)"
		INLINE="NO"
	>
		<NAME>Read_Items</NAME>
		
		
		<DESCRIPTION>
			<PARA>read flash command and store the last_Xpos, last_Ypos etc.</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL is_Keyword(char)"
		INLINE="NO"
	>
		<NAME>is_Keyword</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="char* "
		DECLARATION="char* ReadValue(int &amp;teller)"
		INLINE="NO"
	>
		<NAME>ReadValue</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Read_XY()"
		INLINE="NO"
	>
		<NAME>Read_XY</NAME>
		
		
		<DESCRIPTION>
			<PARA>read commands from command buffer</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Read_WH()"
		INLINE="NO"
	>
		<NAME>Read_WH</NAME>
		
		
		<DESCRIPTION>
			<PARA>read commands from command buffer</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_SIGNED_INTEGER "
		DECLARATION="TWO_G_BYTE_SIGNED_INTEGER Read_A()"
		INLINE="NO"
	>
		<NAME>Read_A</NAME>
		
		
		<DESCRIPTION>
			<PARA>read commands from command buffer</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_GDSII(GdsII*)"
		INLINE="NO"
	>
		<NAME>Read_GDSII</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Header(GdsII*)"
		INLINE="NO"
	>
		<NAME>Read_Header</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Bgnlib(GdsII*)"
		INLINE="NO"
	>
		<NAME>Read_Bgnlib</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Library(GdsII*)"
		INLINE="NO"
	>
		<NAME>Read_Library</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Units(Library*)"
		INLINE="NO"
	>
		<NAME>Read_Units</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Structure(StructureList*)"
		INLINE="NO"
	>
		<NAME>Read_Structure</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Bgnstr(Structure*)"
		INLINE="NO"
	>
		<NAME>Read_Bgnstr</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_StructureName(Structure*)"
		INLINE="NO"
	>
		<NAME>Read_StructureName</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Element(Structure* _structure)"
		INLINE="NO"
	>
		<NAME>Read_Element</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Box(Structure* _structure)"
		INLINE="NO"
	>
		<NAME>Read_Box</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void ReadElflags(Element* _element)"
		INLINE="NO"
	>
		<NAME>ReadElflags</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void ReadLayer(Shape* _shape)"
		INLINE="NO"
	>
		<NAME>ReadLayer</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void ReadBoxType(Box* _box)"
		INLINE="NO"
	>
		<NAME>ReadBoxType</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void ReadWidth(Shape* _shape)"
		INLINE="NO"
	>
		<NAME>ReadWidth</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Read_Flash(Structure*)"
		INLINE="NO"
	>
		<NAME>Read_Flash</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="double "
		DECLARATION="double Deg2Rad(TWO_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Deg2Rad</NAME>
		
		
		<DESCRIPTION>
			<PARA> conversion functions</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="double "
		DECLARATION="double Inch2Meter(FOUR_G_BYTE_SIGNED_INTEGER value)"
		INLINE="NO"
	>
		<NAME>Inch2Meter</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_SIGNED_INTEGER	"
		DECLARATION="TWO_G_BYTE_SIGNED_INTEGER	GetAddAtLayer()"
		INLINE="NO"
	>
		<NAME>GetAddAtLayer</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	GetDavidMannAdd()"
		INLINE="NO"
	>
		<NAME>GetDavidMannAdd</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Getlast_Xpos()"
		INLINE="NO"
	>
		<NAME>Getlast_Xpos</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Getlast_Ypos()"
		INLINE="NO"
	>
		<NAME>Getlast_Ypos</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Getlast_Height()"
		INLINE="NO"
	>
		<NAME>Getlast_Height</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER Getlast_Width()"
		INLINE="NO"
	>
		<NAME>Getlast_Width</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_SIGNED_INTEGER "
		DECLARATION="TWO_G_BYTE_SIGNED_INTEGER Getlast_Angle()"
		INLINE="NO"
	>
		<NAME>Getlast_Angle</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	SetAddAtLayer(TWO_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>SetAddAtLayer</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Setlast_Xpos(FOUR_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Setlast_Xpos</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Setlast_Ypos(FOUR_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Setlast_Ypos</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Setlast_Height(FOUR_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Setlast_Height</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Setlast_Width(FOUR_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Setlast_Width</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Setlast_Angle(TWO_G_BYTE_SIGNED_INTEGER)"
		INLINE="NO"
	>
		<NAME>Setlast_Angle</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>


	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char*	"
		DECLARATION="char*	FLASH_filename"
	>
		<NAME>FLASH_filename</NAME>
		<DESCRIPTION>
			<PARA>filename of flash file</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="ifstream	"
		DECLARATION="ifstream	FLASH_file"
	>
		<NAME>FLASH_file</NAME>
		<DESCRIPTION>
			<PARA>file handle</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Setup*	"
		DECLARATION="Setup*	_setup"
	>
		<NAME>_setup</NAME>
		<DESCRIPTION>
			<PARA>layer properties</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char "
		DECLARATION="char command_buffer[FLASH_BUFF_SIZE]"
	>
		<NAME>command_buffer[FLASH_BUFF_SIZE]</NAME>
		<DESCRIPTION>
			<PARA> om het commando in op te slaan</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_SIGNED_INTEGER	"
		DECLARATION="TWO_G_BYTE_SIGNED_INTEGER	AddAtLayer"
	>
		<NAME>AddAtLayer</NAME>
		<DESCRIPTION>
			<PARA>layer to add the data</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	DavidMannAdd"
	>
		<NAME>DavidMannAdd</NAME>
		<DESCRIPTION>
			<PARA>add to existing drawing</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER last_Xpos"
	>
		<NAME>last_Xpos</NAME>
		<DESCRIPTION>
			<PARA>position data off last flash</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER last_Ypos"
	>
		<NAME>last_Ypos</NAME>
		<DESCRIPTION>
			<PARA>position data off last flash</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER last_Height"
	>
		<NAME>last_Height</NAME>
		<DESCRIPTION>
			<PARA>position data off last flash</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="FOUR_G_BYTE_SIGNED_INTEGER "
		DECLARATION="FOUR_G_BYTE_SIGNED_INTEGER last_Width"
	>
		<NAME>last_Width</NAME>
		<DESCRIPTION>
			<PARA>position data off last flash</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_SIGNED_INTEGER "
		DECLARATION="TWO_G_BYTE_SIGNED_INTEGER last_Angle"
	>
		<NAME>last_Angle</NAME>
		<DESCRIPTION>
			<PARA>position data off last flash</PARA>
		</DESCRIPTION>
	</MEMBER>


</MEMBERS>


</CLASS>
</CXXDOC>

