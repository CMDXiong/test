<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class CommandParser"
>

<META-DATA>
	<NAME>CommandParser</NAME>
	<AUTHOR>klaas</AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Thu Oct 21  9:08:27 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>cparser.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>misc.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>_dl_itr.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdserr.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>alias.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>


<CODE-FILES>
	<CODE-FILE>
		<NAME>cparser.cpp</NAME>
	</CODE-FILE>
</CODE-FILES>


<DESCRIPTION>
	<PARA> base class used to parse command strings according to the BNF below.</PARA>
</DESCRIPTION>





<RELATED-TYPES>
	<RELATED-TYPE TYPE="class">
		<NAME>Evalstring</NAME>
	</RELATED-TYPE>
	<RELATED-TYPE TYPE="class">
		<NAME>Line_Parser</NAME>
	</RELATED-TYPE>
</RELATED-TYPES>

<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="CommandParser()"
		INLINE="NO"
	>
		<NAME>CommandParser</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="virtual "
		DECLARATION="virtual ~CommandParser()"
		INLINE="NO"
	>
		<NAME>~CommandParser</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	GetCommand()"
		INLINE="NO"
	>
		<NAME>GetCommand</NAME>
		
		
		<DESCRIPTION>
			<PARA>read one command from the buffer</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	FlushArg()"
		INLINE="NO"
	>
		<NAME>FlushArg</NAME>
		
		
		<DESCRIPTION>
			<PARA>flush command buffer</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="char*	"
		DECLARATION="char*	GetErrorMes()"
		INLINE="NO"
	>
		<NAME>GetErrorMes</NAME>
		
		
		<DESCRIPTION>
			<PARA>get the error message if parsing went wrong</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL GetEnv(char* envname, char** envstring)"
		INLINE="NO"
	>
		<NAME>GetEnv</NAME>
		
		
		<DESCRIPTION>
			<PARA>get environment variable</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL SetEnv(char* envname, char* envstring)"
		INLINE="NO"
	>
		<NAME>SetEnv</NAME>
		
		
		<DESCRIPTION>
			<PARA>set environment variable</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="DL_List<char*>* "
		DECLARATION="DL_List&lt;char*&gt;* GetArgList()"
		INLINE="NO"
	>
		<NAME>GetArgList</NAME>
		
		
		<DESCRIPTION>
			<PARA>list of command arguments found</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="DL_Iter<char*>* "
		DECLARATION="DL_Iter&lt;char*&gt;* GetArgIter()"
		INLINE="NO"
	>
		<NAME>GetArgIter</NAME>
		
		
		<DESCRIPTION>
			<PARA>iterator to traverse the list of command arguments found</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>




	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	Blanks()"
		INLINE="NO"
	>
		<NAME>Blanks</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL Word()"
		INLINE="NO"
	>
		<NAME>Word</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	MultiPartWord()"
		INLINE="NO"
	>
		<NAME>MultiPartWord</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	QuotedString()"
		INLINE="NO"
	>
		<NAME>QuotedString</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	BracedString()"
		INLINE="NO"
	>
		<NAME>BracedString</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	Comment()"
		INLINE="NO"
	>
		<NAME>Comment</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	VarRef(char type)"
		INLINE="NO"
	>
		<NAME>VarRef</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL	"
		DECLARATION="G_BOOL	Name()"
		INLINE="NO"
	>
		<NAME>Name</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="virtual char "
		DECLARATION="virtual char PeekNextC()"
		INLINE="NO"
	>
		<NAME>PeekNextC</NAME>
		
		
		<DESCRIPTION>
			<PARA>to make derived classes work</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="virtual void "
		DECLARATION="virtual void IncC()"
		INLINE="NO"
	>
		<NAME>IncC</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>


	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	_error_mes[LINELENGTH]"
	>
		<NAME>_error_mes[LINELENGTH]</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Buffer	"
		DECLARATION="Buffer	_b"
	>
		<NAME>_b</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PRIVATE"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Buffer	"
		DECLARATION="Buffer	_varref"
	>
		<NAME>_varref</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>


	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char	"
		DECLARATION="char	a"
	>
		<NAME>a</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="AliasList* "
		DECLARATION="AliasList* _aliaslist"
	>
		<NAME>_aliaslist</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="DL_List<char*>* "
		DECLARATION="DL_List&lt;char*&gt;* _arglist"
	>
		<NAME>_arglist</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="DL_Iter<char*>* "
		DECLARATION="DL_Iter&lt;char*&gt;* _I"
	>
		<NAME>_I</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
</MEMBERS>


</CLASS>
</CXXDOC>

