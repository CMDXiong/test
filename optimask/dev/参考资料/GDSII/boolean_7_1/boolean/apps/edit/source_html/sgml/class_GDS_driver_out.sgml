<!DOCTYPE CXXDOC SYSTEM "cxxdoc.dtd">
<CXXDOC>

<CLASS 
	TYPE="NORMAL"
	TEMPLATE="NO"
	DECLARATION="class GDS_driver_out"
>

<META-DATA>
	<NAME>GDS_driver_out</NAME>
	<AUTHOR>klaas</AUTHOR>
	<VERSION>1.0</VERSION>
	<DATE>Thu Oct 14 13:41:35 MET 1999</DATE>
	<REVISION-HISTORY>
		<REVISION>
			<AUTHOR></AUTHOR>
			<VERSION></VERSION>
			<DATE></DATE>
		</REVISION>
	</REVISION-HISTORY>
</META-DATA>



<HEADER-FILES>
	<HEADER-FILE>
		<NAME>drivout.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>misc.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdsio.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdsdef.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>gdserr.h</NAME>
	</HEADER-FILE>
	<HEADER-FILE>
		<NAME>lsetup.h</NAME>
	</HEADER-FILE>
</HEADER-FILES>


<CODE-FILES>
	<CODE-FILE>
		<NAME>gdsdrout.cpp</NAME>
	</CODE-FILE>
</CODE-FILES>


<DESCRIPTION>
	<PARA> Output driver for GDSII files Every object in the internal database is written in records in the GDSII file Info on the different record types that are written can be found in the GDSII format manual All basic data types for the GDSII records are written using a specialized file stream. overloaded function from class Driver_out write the internal objects in GDSII specific form</PARA>
</DESCRIPTION>

<INHERITANCE>
	<PARENT-CLASS
		SCOPE="public"
		VIRTUAL="STANDARD"
	>
		<NAME>Driver_out</NAME>
	</PARENT-CLASS>
</INHERITANCE>



<RELATED-TYPES>
	<RELATED-TYPE TYPE="class">
		<NAME>Gdsio</NAME>
	</RELATED-TYPE>
</RELATED-TYPES>

<MEMBER-FUNCTIONS>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="GDS_driver_out(Setup* setup, char* filename=0, G_BOOL only_visible=False)"
		INLINE="NO"
	>
		<NAME>GDS_driver_out</NAME>
		<PARAMETERS>
			<PARAMETER>
				<NAME>setup</NAME>
				<DESCRIPTION><PARA>layer properties</PARA></DESCRIPTION>
			</PARAMETER>
			<PARAMETER>
				<NAME>filename</NAME>
				<DESCRIPTION><PARA>name of GDSII output file</PARA></DESCRIPTION>
			</PARAMETER>
			<PARAMETER>
				<NAME>only_visible</NAME>
				<DESCRIPTION><PARA>write only visible layers</PARA></DESCRIPTION>
			</PARAMETER>
		</PARAMETERS>
		
		<DESCRIPTION>
			<PARA> constructor</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="NONE"
		DECLARATION="~GDS_driver_out()"
		INLINE="NO"
	>
		<NAME>~GDS_driver_out</NAME>
		
		
		<DESCRIPTION>
			<PARA> destructor</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL bad()"
		INLINE="NO"
	>
		<NAME>bad</NAME>
		
		
		<DESCRIPTION>
			<PARA>was the file opened correctly</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Box* _Box)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA> overloaded function from class Driver_out</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Circle* _Circle)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(ArrayReference*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Bgnlib*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Bgnstr*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Boundary*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(ColumnsRows*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Elflags*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(GdsII*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Header*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Library*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Path*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Arcseg*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Point*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Segment*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(G_Polygon*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(G_Polyline*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Presentation*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Strans*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(StructureList*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(StructureReference*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Structure*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Text*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PUBLIC"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void "
		DECLARATION="void Write(Units*)"
		INLINE="NO"
	>
		<NAME>Write</NAME>
		
		
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>




	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	WriteHeader(unsigned int, G_BYTE, G_BYTE)"
		INLINE="NO"
	>
		<NAME>WriteHeader</NAME>
		
		
		<DESCRIPTION>
			<PARA>write HEADER for GDSII records</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
	<MEMBER-FUNCTION
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		PURPOSE="NORMAL"
		TYPE="BASIC"
		TYPENAME="void	"
		DECLARATION="void	WriteString(char*)"
		INLINE="NO"
	>
		<NAME>WriteString</NAME>
		
		
		<DESCRIPTION>
			<PARA>write string data for specific records</PARA>
		</DESCRIPTION>
	</MEMBER-FUNCTION>
</MEMBER-FUNCTIONS>

<MEMBERS>




	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="char*	"
		DECLARATION="char*	GDS_filename"
	>
		<NAME>GDS_filename</NAME>
		<DESCRIPTION>
			<PARA>output file name</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="Gdsio	"
		DECLARATION="Gdsio	GDS_file"
	>
		<NAME>GDS_file</NAME>
		<DESCRIPTION>
			<PARA>output file handle</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BOOL "
		DECLARATION="G_BOOL _bad"
	>
		<NAME>_bad</NAME>
		<DESCRIPTION>
			<PARA></PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="TWO_G_BYTE_UNSIGNED_INTEGER	"
		DECLARATION="TWO_G_BYTE_UNSIGNED_INTEGER	_recordsize"
	>
		<NAME>_recordsize</NAME>
		<DESCRIPTION>
			<PARA>record size to write</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BYTE	"
		DECLARATION="G_BYTE	_recordtype"
	>
		<NAME>_recordtype</NAME>
		<DESCRIPTION>
			<PARA>record type to write</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="G_BYTE	"
		DECLARATION="G_BYTE	_datatype"
	>
		<NAME>_datatype</NAME>
		<DESCRIPTION>
			<PARA>data type to write for the record</PARA>
		</DESCRIPTION>
	</MEMBER>
	<MEMBER
		SCOPE="PROTECTED"
		VIRTUAL="STANDARD"
		TYPE="BASIC"
		TYPENAME="int "
		DECLARATION="int _mapping_out[1000]"
	>
		<NAME>_mapping_out[1000]</NAME>
		<DESCRIPTION>
			<PARA>mapping to internal layers GDSII layers</PARA>
		</DESCRIPTION>
	</MEMBER>
</MEMBERS>


</CLASS>
</CXXDOC>

